import * as _tiptap_extension_text_align from '@tiptap/extension-text-align';
import * as _tiptap_extension_underline from '@tiptap/extension-underline';
import * as _tiptap_react from '@tiptap/react';
import { EditorOptions, Editor } from '@tiptap/react';
import * as _tiptap_starter_kit from '@tiptap/starter-kit';
import * as react from 'react';
import { ReactNode, ReactElement } from 'react';
import { CommonInputProps, LabeledProps } from 'ra-ui-materialui';
import { ToggleButtonGroupProps, ToggleButtonProps } from '@mui/material';

/**
 * A rich text editor for the react-admin that is accessible and supports translations. Based on [Tiptap](https://www.tiptap.dev/).
 * @param props The input props. Accept all common react-admin input props.
 * @param {EditorOptions} props.editorOptions The options to pass to the Tiptap editor.
 * @param {ReactNode} props.toolbar The toolbar containing the editors commands.
 *
 * @example <caption>Customizing the editors options</caption>
 * import { RichTextInput, RichTextInputToolbar } from 'ra-input-rich-text';
 * const MyRichTextInput = (props) => (
 *     <RichTextInput
 *         toolbar={<RichTextInputToolbar size="large" />}
 *         label="Body"
 *         source="body"
 *         {...props}
 *     />
 * );
 *
 * @example <caption>Customizing the toolbar size</caption>
 * import { RichTextInput, RichTextInputToolbar } from 'ra-input-rich-text';
 * const MyRichTextInput = (props) => (
 *     <RichTextInput
 *         toolbar={<RichTextInputToolbar size="large" />}
 *         label="Body"
 *         source="body"
 *         {...props}
 *     />
 * );
 *
 * @example <caption>Customizing the toolbar commands</caption>
 * import { RichTextInput, RichTextInputToolbar } from 'ra-input-rich-text';
 * const MyRichTextInput = ({ size, ...props }) => (
 *     <RichTextInput
 *         toolbar={(
 *             <RichTextInputToolbar>
 *                 <LevelSelect size={size} />
 *                 <FormatButtons size={size} />
 *                 <ListButtons size={size} />
 *                 <LinkButtons size={size} />
 *                 <QuoteButtons size={size} />
 *                 <ClearButtons size={size} />
 *             </RichTextInputToolbar>
 *         )}
 *         label="Body"
 *         source="body"
 *         {...props}
 *     />
 * );
 */
declare const RichTextInput: (props: RichTextInputProps) => JSX.Element;
declare const DefaultEditorOptions: {
    extensions: (_tiptap_react.Extension<_tiptap_starter_kit.StarterKitOptions, any> | _tiptap_react.Mark<_tiptap_extension_underline.UnderlineOptions, any> | _tiptap_react.Extension<_tiptap_extension_text_align.TextAlignOptions, any>)[];
};
declare type RichTextInputProps = CommonInputProps & Omit<LabeledProps, 'children'> & {
    disabled?: boolean;
    readOnly?: boolean;
    editorOptions?: Partial<EditorOptions>;
    toolbar?: ReactNode;
};
declare type RichTextInputContentProps = {
    className?: string;
    editor?: Editor;
    error?: any;
    fullWidth?: boolean;
    helperText?: string | ReactElement | false;
    id: string;
    isTouched: boolean;
    isSubmitted: boolean;
    invalid: boolean;
    toolbar?: ReactNode;
};

declare const FormatButtons: (props: ToggleButtonGroupProps) => JSX.Element;

declare const ListButtons: (props: ToggleButtonGroupProps) => JSX.Element;

declare const AlignmentButtons: (props: ToggleButtonGroupProps) => JSX.Element;

declare const LinkButtons: (props: Omit<ToggleButtonProps, 'value'>) => JSX.Element;

declare const QuoteButtons: (props: Omit<ToggleButtonProps, 'value'>) => JSX.Element;

declare const ClearButtons: (props: Omit<ToggleButtonProps, 'value'>) => JSX.Element;

declare const LevelSelect: (props: LevelSelectProps) => JSX.Element;
declare type LevelSelectProps = {
    size?: 'small' | 'medium' | 'large';
};

/**
 * A hook that returns the current text selection in the editor.
 * @returns {(string|null)} The current text selection if any, or null.
 */
declare const useEditorSelection: () => string;

/**
 * A toolbar for the <RichTextInput>.
 * @param props The toolbar props.
 * @param {ReactNode} props.children The toolbar children, usually many <ToggleButton>.
 * @param {'small' | 'medium' | 'large'} props.size The default size to apply to the **default** children.
 *
 * @example <caption>Customizing the size</caption>
 * import { RichTextInput, RichTextInputToolbar } from 'ra-input-rich-text';
 * const MyRichTextInput = (props) => (
 *     <RichTextInput
 *         toolbar={<RichTextInputToolbar size="large" />}
 *         label="Body"
 *         source="body"
 *         {...props}
 *     />
 * );
 *
 * @example <caption>Customizing the children</caption>
 * import { RichTextInput, RichTextInputToolbar } from 'ra-input-rich-text';
 * const MyRichTextInput = ({ size, ...props }) => (
 *     <RichTextInput
 *         toolbar={(
 *             <RichTextInputToolbar>
 *                 <LevelSelect size={size} />
 *                 <FormatButtons size={size} />
 *                 <ListButtons size={size} />
 *                 <LinkButtons size={size} />
 *                 <QuoteButtons size={size} />
 *                 <ClearButtons size={size} />
 *             </RichTextInputToolbar>
 *         )}
 *         label="Body"
 *         source="body"
 *         {...props}
 *     />
 * );
 */
declare const RichTextInputToolbar: (props: RichTextInputToolbarProps) => JSX.Element;
declare type RichTextInputToolbarProps = {
    children?: ReactNode;
    size?: 'small' | 'medium' | 'large';
};

declare const TiptapEditorContext: react.Context<Editor>;

declare const TiptapEditorProvider: ({ children, value, }: TiptapEditorProviderProps) => JSX.Element;
declare type TiptapEditorProviderProps = {
    children: react.ReactNode;
    value: Editor;
};

declare const useTiptapEditor: () => _tiptap_react.Editor;

export { AlignmentButtons, ClearButtons, DefaultEditorOptions, FormatButtons, LevelSelect, LevelSelectProps, LinkButtons, ListButtons, QuoteButtons, RichTextInput, RichTextInputContentProps, RichTextInputProps, RichTextInputToolbar, RichTextInputToolbarProps, TiptapEditorContext, TiptapEditorProvider, TiptapEditorProviderProps, useEditorSelection, useTiptapEditor };
